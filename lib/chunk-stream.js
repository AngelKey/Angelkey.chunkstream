// Generated by IcedCoffeeScript 108.0.11
(function() {
  var ChunkStream, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  exports.ChunkStream = ChunkStream = (function(_super) {
    __extends(ChunkStream, _super);

    function ChunkStream(transform_func, block_size, exact_chunking) {
      var highWaterMark;
      this.transform_func = transform_func;
      this.block_size = block_size;
      this.exact_chunking = exact_chunking;
      this.extra = null;
      highWaterMark = this.exact_chunking ? this.block_size : null;
      ChunkStream.__super__.constructor.call(this, {
        highWaterMark: highWaterMark
      });
    }

    ChunkStream.prototype._transform = function(chunk, encoding, cb) {
      var remainder;
      if (this.extra) {
        chunk = Buffer.concat([this.extra, chunk]);
        this.extra = null;
      }
      remainder = chunk.length % this.block_size;
      if (remainder !== 0) {
        this.extra = chunk.slice(chunk.length - remainder);
        chunk = chunk.slice(0, chunk.length - remainder);
      }
      this.push(this.transform_func(chunk));
      return cb();
    };

    ChunkStream.prototype._flush = function(cb) {
      if (this.extra) {
        this.push(this.transform_func(this.extra));
      }
      return cb();
    };

    return ChunkStream;

  })(stream.Transform);


  /*
       * if we don't have enough data, push it all into extra and return
      if @extra and (@extra.length + chunk.length) < @block_size
        extra = Buffer.concat([@extra, chunk])
        cb()
        return
  
       * concatenate any extra
      if @extra
        chunk = Buffer.concat([@extra, chunk])
        @extra = null
  
       * calculate any remainder - guaranteed to be >= 0 since we wait for when len(chunk + extra) >= block_size
      if @exact_chunking
        remainder = chunk.length - @block_size
      else
        remainder = chunk.length % @block_size
  
       * mangle the buffer into either exactly block_size or a multiple of block_size
      if remainder isnt 0
        @extra = chunk[chunk.length-remainder...chunk.length]
        chunk = chunk[0...chunk.length-remainder]
  
       * do the transformation, and push out the chunk
      @push(@transform_func(chunk))
      cb()
  
    _flush : (cb) ->
      if @extra
         * if we're doing exact chunking, it's possible we will have to write multiple flush chunks
        if @exact_chunking
          loop
            push(@transform_func(@extra[0...@block_size]))
            @extra = @extra[@block_size...]
            break unless @extra.length == 0
         * if we're not, just write out the last chunk
        else
          @push(@transform_func(@extra))
      cb()
   */

}).call(this);
