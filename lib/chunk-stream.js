// Generated by IcedCoffeeScript 108.0.11
(function() {
  var ChunkStream, iced, make_esc, stream, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  stream = require('stream');

  make_esc = require('iced-error').make_esc;

  exports.ChunkStream = ChunkStream = (function(_super) {
    __extends(ChunkStream, _super);

    function ChunkStream(_arg) {
      this.transform_func = _arg.transform_func, this.block_size = _arg.block_size, this.exact_chunking = _arg.exact_chunking, this.writableObjectMode = _arg.writableObjectMode, this.readableObjectMode = _arg.readableObjectMode;
      this.extra = null;
      ChunkStream.__super__.constructor.call(this, {
        writableObjectMode: this.writableObjectMode,
        readableObjectMode: this.readableObjectMode
      });
    }

    ChunkStream.prototype._transform = function(chunk, encoding, cb) {
      var esc, out, remainder, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Error in transform function");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.writableObjectMode) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
                funcname: "ChunkStream._transform"
              });
              _this.transform_func(chunk, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return out = arguments[0];
                  };
                })(),
                lineno: 14
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this.push(out);
              return cb(null);
              return __iced_k();
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          if (_this.extra != null) {
            chunk = Buffer.concat([_this.extra, chunk]);
            _this.extra = null;
          }
          if (chunk.length < _this.block_size) {
            _this.extra = chunk;
            return cb(null);
          }
          if (_this.exact_chunking) {
            (function(__iced_k) {
              var _while;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(chunk.length >= _this.block_size)) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
                      funcname: "ChunkStream._transform"
                    });
                    _this.transform_func(chunk.slice(0, _this.block_size), esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return out = arguments[0];
                        };
                      })(),
                      lineno: 31
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    _this.push(out);
                    return _next(chunk = chunk.slice(_this.block_size));
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              _this.extra = chunk;
              return cb(null);
              return __iced_k();
            });
          } else {
            remainder = chunk.length % _this.block_size;
            if (remainder !== 0) {
              _this.extra = chunk.slice(chunk.length - remainder);
              chunk = chunk.slice(0, chunk.length - remainder);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
                funcname: "ChunkStream._transform"
              });
              _this.transform_func(chunk, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return out = arguments[0];
                  };
                })(),
                lineno: 44
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this.push(out);
              return cb(null);
              return __iced_k();
            });
          }
        };
      })(this));
    };

    ChunkStream.prototype._flush_append = function(cb) {
      return cb(null, null);
    };

    ChunkStream.prototype._flush = function(cb) {
      var esc, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Error in transform function");
      (function(_this) {
        return (function(__iced_k) {
          if (!_this.writableObjectMode) {
            (function(__iced_k) {
              var _while;
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = __iced_k;
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = _continue;
                if (!(_this.exact_chunking && _this.extra && _this.extra.length >= _this.block_size)) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
                      funcname: "ChunkStream._flush"
                    });
                    _this.transform_func(_this.extra.slice(0, _this.block_size), esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return out = arguments[0];
                        };
                      })(),
                      lineno: 57
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    _this.push(out);
                    return _next(_this.extra = _this.extra.slice(_this.block_size));
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              (function(__iced_k) {
                if (_this.extra && _this.extra.length !== 0) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
                      funcname: "ChunkStream._flush"
                    });
                    _this.transform_func(_this.extra, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return out = arguments[0];
                        };
                      })(),
                      lineno: 63
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(_this.push(out));
                  });
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/mpcsh/keybase/node-chunk-stream/src/chunk-stream.iced",
              funcname: "ChunkStream._flush"
            });
            _this._flush_append(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 66
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof out !== "undefined" && out !== null) {
              _this.push(out);
            }
            return cb(null);
          });
        };
      })(this));
    };

    return ChunkStream;

  })(stream.Transform);

}).call(this);
