// Generated by IcedCoffeeScript 108.0.11
(function() {
  var ChunkStream, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  exports.ChunkStream = ChunkStream = (function(_super) {
    __extends(ChunkStream, _super);

    function ChunkStream(transform_func, _arg) {
      this.transform_func = transform_func;
      this.block_size = _arg.block_size, this.exact_chunking = _arg.exact_chunking, this.writableObjectMode = _arg.writableObjectMode, this.readableObjectMode = _arg.readableObjectMode;
      this.extra = null;
      ChunkStream.__super__.constructor.call(this, {
        writableObjectMode: this.writableObjectMode,
        readableObjectMode: this.readableObjectMode
      });
    }

    ChunkStream.prototype._transform = function(chunk, encoding, cb) {
      var remainder;
      if (this.writableObjectMode) {
        this.push(this.transform_func(chunk));
        return cb();
      }
      if (this.extra != null) {
        chunk = Buffer.concat([this.extra, chunk]);
        this.extra = null;
      }
      if (chunk.length < this.block_size) {
        this.extra = chunk;
      } else {
        if (this.exact_chunking) {
          remainder = chunk.length - this.block_size;
        } else {
          remainder = chunk.length % this.block_size;
        }
        if (remainder !== 0) {
          this.extra = chunk.slice(chunk.length - remainder);
          chunk = chunk.slice(0, chunk.length - remainder);
        }
        this.push(this.transform_func(chunk));
      }
      return cb();
    };

    ChunkStream.prototype._flush = function(cb) {
      if (!this.writableObjectMode) {
        while (this.exact_chunking && this.extra && this.extra.length > this.block_size) {
          this.push(this.transform_func(this.extra.slice(0, this.block_size)));
          this.extra = this.extra.slice(this.block_size);
        }
        if (this.extra && this.extra.length !== 0) {
          this.push(this.transform_func(this.extra));
        }
      }
      return cb();
    };

    return ChunkStream;

  })(stream.Transform);

}).call(this);
